#version 400 core
//shaders are quite similar refer to the shaders in shaderEngine for documentation

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
out vec4 out_Color;
uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

const float levels = 10.0;

void main(void){
    //calculate color combination of sampled colors of the textures induced by blendMap
    vec4 blendMapColor = texture(blendMap, pass_textureCoordinates);
    float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
    vec2 tiltedCoords = pass_textureCoordinates * 100.0;
    vec4 backgroundTextureColor = texture(backgroundTexture, tiltedCoords) *backTextureAmount;
    vec4 rTextureColor = texture(rTexture, tiltedCoords) * blendMapColor.r;
    vec4 gTextureColor = texture(gTexture, tiltedCoords) * blendMapColor.g;
    vec4 bTextureColor = texture(bTexture, tiltedCoords) * blendMapColor.b;
    vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;

    // calculate intensity of diffuse lighting
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);
    float nDotLight = dot(unitNormal, unitLightVector);
    float brightness = max(nDotLight, 0.2);
    float level = floor(brightness * levels); // calculates level for Cel Shading
    brightness = level / levels; // set lowered brightness for Cel Shading
    vec3 diffuse = brightness * lightColor;

    // calculate intensity of specular lighting
    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 lightDirection = - unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
    float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
    specularFactor = max(specularFactor, 0.0);
    float dampedFactor = pow(specularFactor, shineDamper);
    level = floor(dampedFactor * levels); // calculates level for Cel Shading
    dampedFactor = level / levels; // set lowered brightness for Cel Shading
    vec3 finalSpecular = dampedFactor * reflectivity * lightColor;

    out_Color = vec4(diffuse, 1.0) * totalColor + vec4(finalSpecular, 1.0);
}